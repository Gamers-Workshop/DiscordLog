// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DiscordWebhook;
//
//    var discordWebhook = DiscordWebhook.FromJson(jsonString);

namespace DiscordWebhookData
{
    using System;
    using System.Globalization;
    using DiscordLog;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class DiscordWebhook
    {
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("embeds")]
        public DiscordEmbed[] Embeds { get; set; }
        [JsonProperty("username")]
        public string Username { get; set; }
        [JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }
        // ReSharper disable once InconsistentNaming
        [JsonProperty("tts")]
        public bool IsTTS { get; set; }
        [JsonProperty("allowed_mentions")]
        public DiscordAllowedMention AllowedMentions { get; set; }
        [JsonProperty("thread_name")]
        public string ThreadName { get; set; }
    }
    public class DiscordEmbed
    {
        [JsonProperty("title")]
        public string Title { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("color")]
        public int? Color { get; set; }

        [JsonProperty("fields")]
        public DiscordFiels[] Fields { get; set; }
        [JsonProperty("footer")]
        public DiscordFooter Footer { get; set; }

        [JsonProperty("timestamp")]
        public DateTime Timestamp { get; set; }
    }
    public class DiscordFiels
    {
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("value")]
        public string Value { get; set; }
        [JsonProperty("inline")]
        public bool? Inline { get; set; }
    }
    public class DiscordFooter
    {
        [JsonProperty("text")]
        public string Text { get; set; }
        [JsonProperty("icon_url")]
        public string IconUrl { get; set; }
        [JsonProperty("proxy_icon_url")]
        public string ProxyIconUrl { get; set; }
    }
    public class DiscordAllowedMention
    {
        [JsonProperty("parse")]
        public string[] Parse { get; set; }
        [JsonProperty("roles")]
        public string[] Roles { get; set; }
        [JsonProperty("users")]
        public string[] Users { get; set; }
        [JsonProperty("replied_user")]
        public bool RepliedUser { get; set; }
    }

    public static class Serialize
    {
        public static string ToJson(this DiscordWebhook self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
